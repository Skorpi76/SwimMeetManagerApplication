using System;
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SwimMeetLibrary;
namespace UnitTests
{
    /// <summary>
    /// Summary description for CoachClassTest
    /// </summary>
    [TestClass]
    public class CoachClassTest
    {
        public CoachClassTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        //
        // You can use the following additional attributes as you write your tests:
        //
        // Use ClassInitialize to run code before running the first test in the class
        // [ClassInitialize()]
        // public static void MyClassInitialize(TestContext testContext) { }
        //
        // Use ClassCleanup to run code after all tests in a class have run
        // [ClassCleanup()]
        // public static void MyClassCleanup() { }
        //
        // Use TestInitialize to run code before running each test 
        // [TestInitialize()]
        // public void MyTestInitialize() { }
        //
        // Use TestCleanup to run code after each test has run
        // [TestCleanup()]
        // public void MyTestCleanup() { }
        //
        #endregion


        [TestMethod]
        public void Test_ARegistrantIDAutoGenerated() // must be on top
        {
            int expectedResult1 = 1;
            int expectedResult2 = 2;

            Registrant registrant1 = new Registrant();
            Registrant registrant2 = new Registrant();
            try
            {
                Assert.AreEqual(expectedResult1, registrant1.ID);
                Assert.AreEqual(expectedResult2, registrant2.ID);
            }
            catch
            {
                throw new Exception("Registrant 1 ID: " + registrant1.ID + " Registrant 2 ID" + registrant2.ID);
            }
        }
        [TestMethod]
        public void Test_Coach_ClubProperty()
        {
            Club aClub = new Club();
            Coach aCoach = new Coach();
            aClub.AddCoach(aCoach);
            Assert.AreEqual(aCoach, aClub.Coaches[0]);
        }

        [TestMethod]
        public void Test_Coach_CredentialsProperty()
        {
            string expectedResult = "NNCA";
            Coach aCoach = new Coach();
            aCoach.Credentials = "NNCA";
            Assert.AreEqual(expectedResult, aCoach.Credentials);
        }



        [TestMethod]
        public void Test_Coach_ConstructorFilled()
        {
            string expectedResult = "Micael Phelps";
            Coach aCoach = new Coach("Micael Phelps", new DateTime(1945, 6, 30), new Adress("5 Queen St", "Toronto", "ON", "M1L 6Y7"), 3123123333);
            Assert.AreEqual(expectedResult, aCoach.Name);
        }

        [TestMethod]
        public void Test_Coach_ConstructorEmpty()
        {
            string expectedResult = "0001-01-01 12:00:00 AM";
            Coach aCoach = new Coach();
            Assert.AreEqual(expectedResult, aCoach.DOB.ToString());
        }

        [TestMethod]
        public void Test_Coach_AddSwimmerMethods()
        {
            Coach aCoach = new Coach("Micael Phelps", new DateTime(1975, 6, 30), new Adress("5 Queen St", "Boston", "ON", "M1L 6Y7"), 3123123333);
            Club aClub = new Club() { Name = "Sport life" };
            aClub.AddCoach(aCoach);
            Swimmer aSwimmer = new Swimmer();
            aClub.AddSwimmer(aSwimmer);
            aCoach.AddSwimmer(aSwimmer);
            Assert.AreEqual(aSwimmer, aCoach.Swimmers[0]);
        }

        [TestMethod]
        [ExpectedException(typeof(Exception), "Coach is not assigned to a club")]
        public void Test_Coach_AddSwimmerCoachIsNotAssignedException()
        {
            Coach aCoach = new Coach("Micael Phelps", new DateTime(1975, 6, 30), new Adress("5 Queen St", "Boston", "ON", "M1L 6Y7"), 3123123333);
            Club aClub = new Club() { Name = "Sport life" };
            Swimmer aSwimmer = new Swimmer();
            aClub.AddSwimmer(aSwimmer);
            aCoach.AddSwimmer(aSwimmer);
        }

        [TestMethod]
        [ExpectedException(typeof(Exception), "Coach and swimmer are not in the same club")]
        public void Test_Coach_AddSwimmerDifferentClubException()
        {
            Coach aCoach = new Coach("Micael Phelps", new DateTime(1975, 6, 30), new Adress("5 Queen St", "Boston", "ON", "M1L 6Y7"), 3123123333);//6
            Club aClub = new Club() { Name = "Sport life" };
            aClub.AddCoach(aCoach);
            Club bClub = new Club();
            Swimmer aSwimmer = new Swimmer();
            bClub.AddSwimmer(aSwimmer);
            aCoach.AddSwimmer(aSwimmer);
        }

        [TestMethod]
        [ExpectedException(typeof(Exception), "Coach and swimmer are not in a same club")]
        public void Test_Coach_AssignedToDifferentClubException()
        {
            Coach aCoach = new Coach("Micael Phelps", new DateTime(1975, 6, 30), new Adress("5 Queen St", "Boston", "ON", "M1L 6Y7"), 3123123333);//6
            Club aClub = new Club() { Name = "Sport life" };
            aClub.AddCoach(aCoach);
            Club bClub = new Club();
            Swimmer aSwimmer = new Swimmer();
            bClub.AddSwimmer(aSwimmer);
            aSwimmer.ItsCoach = aCoach;
        }

      
    }
}
