using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SwimMeetLibrary;

namespace UnitTests
{
    [TestClass]
    public class ClubClassTest
    {
        [TestMethod]
        public void Test_AClubIDAutoGenerated() // must be on top 
        {
            int expectedResult1 = 1;
            int expectedResult2 = 2;

            Club club1 = new Club();
            Club club2 = new Club();
            try
            {
                Assert.AreEqual(expectedResult1, club1.ClubID);
                Assert.AreEqual(expectedResult2, club2.ClubID);
            }
            catch
            {

                throw new Exception("Club 1 id: " + club1.ClubID + " Club 1 id: " + club2.ClubID);
            }

        }

        


        [TestMethod]
        public void Test_Club_PhoneNumberProperty()
        {
            Club club1;
            club1 = new Club();
            long expectedResult = 4164444444;
            club1.ClubPhoneNumber = 4164444444;


            Assert.AreEqual(expectedResult, club1.ClubPhoneNumber);
        }

        [TestMethod]
        public void Test_Club_NameProperty()
        {
            Club club1;
            club1 = new Club();
            string expectedResult = "Club2";
            club1.ClubName = "Club2";


            Assert.AreEqual(expectedResult, club1.ClubName);
        }
        [TestMethod]
        public void Test_Club_PhoneNumberMethod()
        {
            Club club1;
            club1 = new Club();
            string expectedResult = "+1(416)-444-4444";
            club1.ClubPhoneNumber = 4164444444;
            long currentResult = club1.ClubPhoneNumber;


            Assert.AreEqual(expectedResult, Club.PhoneNumber(currentResult));
        }

        [TestMethod]
        public void Test_Club_AddSwimmerMethodNumberOfSwimmers()
        {
            int expectedResult = 2;
            Club club1 = new Club("CCAC", new Adress("35 River St", "Toronto", "ON", "M2M 5M5"), 4165555555);
            Registrant swimmer1 = new Registrant("Bob Smith", new DateTime(1970, 1, 1),
                                                    new Adress("35 Elm St", "Toronto", "ON", "M2M 2M2"), 4161234567);
            Registrant swimmer2 = new Registrant();
            club1.AddSwimmer(swimmer1);
            club1.AddSwimmer(swimmer2);


            Assert.AreEqual(expectedResult, club1.NumberOfSwimmers);
        }

        [TestMethod] // Testing Registrant ones he is in a club 
        public void Test_Club_AddSwimmerMethodSwimmers()
        {
            string expectedResult = "CCAC";
            Club club1 = new Club("CCAC", new Adress("35 River St", "Toronto", "ON", "M2M 5M5"), 4165555555);
            Registrant swimmer1 = new Registrant("Bob Smith", new DateTime(1970, 1, 1),
                                                    new Adress("35 Elm St", "Toronto", "ON", "M2M 2M2"), 4161234567);

            club1.AddSwimmer(swimmer1);
            try
            {
                Assert.AreEqual(expectedResult, swimmer1.NClub.ClubName);
            }
            catch
            {
                throw new Exception(string.Format("Swimmer: {0}, Clubname {1}", swimmer1.RegistrantName, swimmer1.NClub.ClubName));
            }
        }

        [TestMethod]
        public void Test_Club_AddSwimmerMethodReAssignSwimmer()
        {
            Club club1 = new Club("CCAC", new Adress("35 River St", "Toronto", "ON", "M2M 5M5"), 4165555555);
            Club club2 = new Club();
            club2.ClubName = "Club2";
            Registrant swimmer1 = new Registrant();
            try
            {
                club1.AddSwimmer(swimmer1);
                club2.AddSwimmer(swimmer1);
                Assert.Fail("no exception thrown");
            }
            catch(Exception ex)
            {
                Assert.IsTrue(ex is System.Exception);
            }
        }

        [TestMethod]
        public void Test_Club_GetInfoWithoutSwimmers()
        {
            Club club1 = new Club("CCAC", new Adress("35 River St", "Toronto", "ON", "M2M 5M5"), 4165555555);
            string expectedResult = string.Format("\nName: {1} \nAdress: {2} \n#hone number: {3} \nReg number: {0}", club1.ClubID, club1.ClubName, club1.Address.ToString(), Club.PhoneNumber(club1.ClubPhoneNumber));
            expectedResult += string.Format("\nSwimmers:");
            int i = 0;
            while (club1.Swimmers[i] != null)
            {
                expectedResult += string.Format("\n\t{0}", club1.Swimmers[i].RegistrantName);
                i++;
            }

            Assert.AreEqual(expectedResult, club1.ToString());
        }

        [TestMethod]
        public void Test_Club_GetInfoWithSwimmers()
        {

            Club club1 = new Club("CCAC", new Adress("35 River St", "Toronto", "ON", "M2M 5M5"), 4165555555);
            Registrant swimmer1 = new Registrant();
            Registrant swimmer2 = new Registrant();
            club1.AddSwimmer(swimmer1);
            club1.AddSwimmer(swimmer2);
            string expectedResult = string.Format("\nName: {1} \nAdress: {2} \n#hone number: {3} \nReg number: {0}", club1.ClubID, club1.ClubName, club1.Address.ToString(), Club.PhoneNumber(club1.ClubPhoneNumber));
            expectedResult += string.Format("\nSwimmers:");
            int i = 0;
            while (club1.Swimmers[i] != null)
            {
                expectedResult += string.Format("\n\t{0}", club1.Swimmers[i].RegistrantName);
                i++;
            }

            Assert.AreEqual(expectedResult, club1.ToString());
        }
        }
}
